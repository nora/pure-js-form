(()=>{"use strict";class e{get isValid(){throw new Error("not implemented")}}class t extends e{constructor(e,t=null){super(),this.name=e.name,this.inputElement=e,this.formContainer=t,this.validity=e.validity}static get ERROR_MESSAGE_ATTRIBUTE_NAME(){return"data-attr-name"}static get CHANGED_CLASS_NAME(){return"changed"}validate(){return this.errorMessage=this.validationMessage,this.addChangedClass(),this.isValid}addChangedClass(){return this.inputElement.classList.add(t.CHANGED_CLASS_NAME)}get isValid(){return this.validity.valid}get parent(){return this.formContainer??window.document}get errorMessageElement(){return this.parent.querySelector(this.errorMessageElementSelector)}get errorMessageElementSelector(){return`[${t.ERROR_MESSAGE_ATTRIBUTE_NAME}="${this.name}"]`}set errorMessage(e){this.errorMessageElement.textContent=e}get validationMessage(){return this.inputElement.validationMessage}}const r=document.querySelector("form");new class extends e{constructor(e,t){super(),this.formContainer=e,this.remoteValidator=t,this._errors=[],this.inputValidators=this.createInputValidatorList([...e.elements]),e.addEventListener("change",(e=>{this.handleChangeFormControll(e)})),e.addEventListener("submit",(e=>{this.handleSubmit(e)}))}get isValid(){return this.formContainer.reportValidity()}createInputValidatorList(e){return e.map((e=>new t(e)))}handleChangeFormControll({target:{name:e}}){this.findValidatorByName(e).validate()}async handleSubmit(e){e.preventDefault(),await this.validate()&&this.formContainer.submit()}findValidatorByName(e){return this.inputValidators.find((({name:t})=>t===e))}async validate(){return!!this.isValid&&(this.remoteValidate&&(this.errors=await this.remoteValidate()),!this.errors.length)}async remoteValidate(){return this.remoteValidator?this.remoteValidator():[]}set errors(e){e.forEach((e=>{this.errorMessage=e})),this._errors=e}get errors(){return this._errors}set errorMessage({attributeName:e,message:t}){return this.findValidatorByName(e).errorMessage=t,t}}(r,(async()=>[{attributeName:"name",message:"既に使用されている名前です"},{attributeName:"email",message:"無効なメールアドレスです"},{attributeName:"flavor",message:"嘘をついてはいけません"}]))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,